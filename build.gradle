plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.8-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.nexon'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.7.1'
    implementation 'junit:junit:4.13.1'
    implementation 'net.jodah:expiringmap:0.5.9'
    compileOnly 'org.projectlombok:lombok'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}

def frontendDir = "$projectDir/frontend"

// 1. application을 바로 실행하는 경우
// profile에 -Dspring.profiles.active나 -Pprofile 값을 저장해놓고 난 다음 실행해야하는 코드임.
// 아무것도 가져오는 것이 없다면 dev를 가져오는건데, 아무것도 가져오는 것이 없다!!!!!!!
// 2. gradle build 실행의 경우
// gradle build 작업은 -Pprofile을 자동으로 인식한다.
ext.profile = (!project.hasProperty('profile') || !profile) ? 'dev' : profile

sourceSets {
    main {
        resources {
            srcDirs = [
                    "$projectDir/src/main/resources"
                    , "$projectDir/src/main/resources-$profile"
            ]
        }
    }
}
//tasks {
//    processResources {
//        duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
//    }
//}

processResources {
    // application local로 띄울때는 copyReactBuildFiles가 depend 된게 없으므로 실행되지 않음
    // build 할때는 bootJar가 실행되므로 depend된 copyReactBuildFiles가 먼저 실행됨.
    mustRunAfter "copyReactBuildFiles"
}

tasks.bootJar {
    dependsOn "copyReactBuildFiles"
}

tasks.register('installReact', Exec) {
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "audit", "fix"
        commandLine "npm", "install"
    }
//    commandLine "cd ../"
}

tasks.register('buildReact', Exec) {
    dependsOn "installReact"
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

tasks.register('copyReactBuildFiles', Copy) {
    dependsOn "buildReact"
    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
}




